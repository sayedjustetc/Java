import { RequestType, RequestType0, RequestHandler0, RequestHandler, NotificationType, NotificationHandler, HandlerResult, CancellationToken } from 'vscode-jsonrpc';
export interface ProposedWorkspaceInitializeParams {
    workspaceFolders: WorkspaceFolder[] | null;
}
export interface ProposedWorkspaceClientCapabilities {
    workspaceFolders?: boolean;
}
export interface WorkspaceFolder {
    /**
     * The associated URI for this workspace folder.
     */
    uri: string;
    /**
     * The name of the workspace folder. Defaults to the
     * uri's basename.
     */
    name: string;
}
/**
 * The `workspace/getWorkspaceFolders` is sent from the server to the client to fetch the open workspace folders.
 */
export declare namespace GetWorkspaceFolders {
    const type: RequestType0<WorkspaceFolder[] | null, void, void>;
    type HandlerSignature = RequestHandler0<WorkspaceFolder[] | null, void>;
    type MiddlewareSignature = (token: CancellationToken, next: HandlerSignature) => HandlerResult<WorkspaceFolder[] | null, void>;
}
/**
 * The `workspace/getWorkspaceFolder` is sent from the server to the client to fetch the workspace folder for a
 * specific resource.
 */
export declare namespace GetWorkspaceFolder {
    const type: RequestType<string, WorkspaceFolder | null, void, void>;
    type HandlerSignature = RequestHandler<string, WorkspaceFolder | null, void>;
    type MiddlewareSignature = (uri: string, token: CancellationToken, next: HandlerSignature) => HandlerResult<WorkspaceFolder | null, void>;
}
/**
 * The `workspace/didChangeWorkspaceFolders` notification is sent from the client to the server when the workspace
 * folder configuration changes.
 */
export declare namespace DidChangeWorkspaceFolders {
    const type: NotificationType<DidChangeWorkspaceFoldersParams, void>;
    type HandlerSignature = NotificationHandler<DidChangeWorkspaceFoldersParams>;
    type MiddlewareSignature = (params: DidChangeWorkspaceFoldersParams, next: HandlerSignature) => void;
}
/**
 * The parameters of a `workspace/didChangeWorkspaceFolders` notification.
 */
export interface DidChangeWorkspaceFoldersParams {
    /**
     * The actual workspace folder change event.
     */
    event: WorkspaceFoldersChangeEvent;
}
/**
 * The workspace folder change event.
 */
export interface WorkspaceFoldersChangeEvent {
    /**
     * The array of added workspace folders
     */
    added?: WorkspaceFolder[];
    /**
     * The array of the removed workspace folders
     */
    removed?: WorkspaceFolder[];
}
