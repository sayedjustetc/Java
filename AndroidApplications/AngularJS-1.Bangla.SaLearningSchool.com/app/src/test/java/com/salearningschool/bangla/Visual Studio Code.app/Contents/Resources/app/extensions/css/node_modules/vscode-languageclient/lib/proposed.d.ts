import { WorkspaceFoldersChangeEvent as VWorkspaceFoldersChangeEvent } from 'vscode';
import { MessageType as RPCMessageType } from 'vscode-jsonrpc';
import { DynamicFeature, StaticFeature, RegistrationData, BaseLanguageClient, NextSignature } from './client';
import { ClientCapabilities, InitializedParams, GetWorkspaceFolders, GetWorkspaceFolder, GetConfigurationRequest } from 'vscode-languageserver-protocol';
export interface WorkspaceFolderMiddleware {
    workspaceFolders?: GetWorkspaceFolders.MiddlewareSignature;
    workspaceFolder?: GetWorkspaceFolder.MiddlewareSignature;
    didChangeWorkspaceFolders?: NextSignature<VWorkspaceFoldersChangeEvent, void>;
}
export declare class WorkspaceFoldersFeature implements DynamicFeature<undefined> {
    private _client;
    private _listeners;
    constructor(_client: BaseLanguageClient);
    readonly messages: RPCMessageType;
    fillInitializeParams(params: InitializedParams): void;
    fillClientCapabilities(capabilities: ClientCapabilities): void;
    initialize(): void;
    register(_message: RPCMessageType, data: RegistrationData<undefined>): void;
    unregister(id: string): void;
    dispose(): void;
    private asProtocol(workspaceFolder);
    private asProtocol(workspaceFolder);
    private getWorkspaceFolderMiddleware();
}
export interface ConfigurationMiddleware {
    configuration?: GetConfigurationRequest.MiddlewareSignature;
}
export declare class ConfigurationFeature implements StaticFeature {
    private _client;
    constructor(_client: BaseLanguageClient);
    fillClientCapabilities(capabilities: ClientCapabilities): void;
    initialize(): void;
    private getConfiguration(resource, section);
    private getConfigurationMiddleware();
}
export declare function ProposedProtocol(client: BaseLanguageClient): (StaticFeature | DynamicFeature<any>)[];
